//1.this was autogenerated by a tool. Do not modify! Use partial
using System;
using System.Collections.Generic;
using GeneratorFromDB;
using Microsoft.EntityFrameworkCore;

//modified 2023.12.15
namespace Generated;

public partial class ApplicationDBContext : DbContext
{
    public ApplicationDBContext(DbContextOptions<ApplicationDBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<MSPC_Register> MSPC_Register { get; set; }
    //public virtual DbSet<MSPC_Register_Table> MSPC_Register_Table { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}

//added new
public partial class ApplicationDBContext : DbContext
{
    public static MetaDB  metaData = new("ApplicationDBContext");
    [System.Runtime.CompilerServices.ModuleInitializer]
    public static void ApplicationDBContext_AddTables(){
        metaData.AddTable(MSPC_Register_Table.metaData);
        AllDB.Singleton.AddDb(metaData);
    }

        public async Task<MSPC_Register[]> MSPC_RegisterFind_Array( SearchMSPC_Register? search){
 
        IQueryable<MSPC_Register> data= this.MSPC_Register ;
        if(search == null){
            return await data.ToArrayAsync();
        }
        data = search.TransformToWhere(data);        
        IQueryable<MSPC_Register> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return await ret.ToArrayAsync();
    }

    public  IAsyncEnumerable<MSPC_Register> MSPC_RegisterGetAll(){
        return this.MSPC_RegisterFind_AsyncEnumerable(null);
    }
        public async  Task<MSPC_Register> MSPC_RegisterSave(MSPC_Register val){

        var data= await MSPC_RegisterSaveMultiple(val);
        if(data == null)
            return null;

        return data[0];
                
    }
    public async  Task<MSPC_Register[]> MSPC_RegisterSaveMultiple(params MSPC_Register[] values){

        if(values == null)
            return null;
        if(values.Length == 0)
            return values;
        foreach(var value in values){
            this.MSPC_Register.Add(value);
        }
        await SaveChangesAsync();
        return values;

                
    }

    public  IAsyncEnumerable<MSPC_Register> MSPC_RegisterSimpleSearch(GeneratorFromDB.SearchCriteria sc, eMSPC_RegisterColumns colToSearch, string value){
        
 var search = SearchMSPC_Register.FromSearch(sc,colToSearch,value);
 /*
        var orderBy = new GeneratorFromDB.OrderBy<eMSPC_RegisterColumns>();
                    orderBy.FieldName = colToSearch;
                orderBy.Asc = false;
        search.OrderBys = new[] { orderBy };
        search.PageNumber = 1;
        search.PageSize = int.MaxValue-1;
        var s = new GeneratorFromDB.SearchField<eMSPC_RegisterColumns>();
        s.Criteria = sc;
        s.FieldName = colToSearch;
        s.Value = value;
        search.SearchFields = new[] { s };
        */
        var data = this.MSPC_RegisterFind_AsyncEnumerable(search);
        return data;
    }   
/*
    public IAsyncEnumerable<MSPC_Register> MSPC_RegisterFind_AsyncEnumerable(SearchMSPC_Register? search){
 
        IQueryable<MSPC_Register> data= this.MSPC_Register ;
        if(search == null){
            return data.AsAsyncEnumerable();
        }
        data = search.TransformToWhere(data);        
        IQueryable<MSPC_Register> =search.TransformToOrder(data);
        if(search.PageSize>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    }
*/
    public Task<long> MSPC_RegisterCount( SearchMSPC_Register? search){
     
        IQueryable<MSPC_Register> data= this.MSPC_Register ;
        if(search != null){
            data = search.TransformToWhere(data);        
        }        
        return data.LongCountAsync();
    }
    

    

    public IAsyncEnumerable<MSPC_Register> MSPC_RegisterFind_AsyncEnumerable(SearchMSPC_Register? search){
        IQueryable<MSPC_Register> data= this.MSPC_Register ;
        if(search == null){
                        return data.AsAsyncEnumerable();
                    }
        data = search.TransformToWhere(data); 
        
        IQueryable<MSPC_Register> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret=ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    
    }

}
public interface I_InsertDataApplicationDBContext{
        Task<MSPC_Register_Table?> InsertMSPC_Register(MSPC_Register_Table value);
        Task<MSPC_Register_Table[]> InsertMSPC_Registers(params MSPC_Register_Table[] values);

    }

public class InsertDataApplicationDBContext: I_InsertDataApplicationDBContext{

        private ApplicationDBContext _context;
        public InsertDataApplicationDBContext(ApplicationDBContext context){
            _context=context;
        }
        public async Task<MSPC_Register_Table?> InsertMSPC_Register(MSPC_Register_Table value){
            if (value == null)
                return null;

            MSPC_Register val = (MSPC_Register)value!;
            _context.MSPC_Register.Add(val);
            await _context.SaveChangesAsync();
            return (MSPC_Register_Table)val! ;

        }
        public async Task<MSPC_Register_Table[]> InsertMSPC_Registers(params MSPC_Register_Table[] values){
        
        if (values == null || values.Length == 0)
            return new MSPC_Register_Table[0];

        MSPC_Register[] vals = values.Select(it=>(MSPC_Register)it!).ToArray();
        _context.MSPC_Register.AddRange(vals);
        await _context.SaveChangesAsync();
        return vals.Select(it => (MSPC_Register_Table)it!  ).ToArray();
    }
    
    
}//end class InsertDataApplicationDBContext

   public interface ISearchDataMSPC_Register {
        IAsyncEnumerable<MSPC_Register> MSPC_RegisterFind_AsyncEnumerable(SearchMSPC_Register? search);
    
    public Task<long> GetAllCount();
    public Task<long> GetAllCount(SearchMSPC_Register? search);

        
    
    public  IAsyncEnumerable<MSPC_Register> MSPC_RegisterSimpleSearch_Name(GeneratorFromDB.SearchCriteria sc,  string value);
    public  IAsyncEnumerable<MSPC_Register> MSPC_RegisterSimpleSearchNull_Name(GeneratorFromDB.SearchCriteria sc);
    
    public  IAsyncEnumerable<MSPC_Register> MSPC_RegisterSimpleSearch_Hostname(GeneratorFromDB.SearchCriteria sc,  string value);
    public  IAsyncEnumerable<MSPC_Register> MSPC_RegisterSimpleSearchNull_Hostname(GeneratorFromDB.SearchCriteria sc);
    
    public  IAsyncEnumerable<MSPC_Register> MSPC_RegisterSimpleSearch_Port(GeneratorFromDB.SearchCriteria sc,  int? value);
    public  IAsyncEnumerable<MSPC_Register> MSPC_RegisterSimpleSearchNull_Port(GeneratorFromDB.SearchCriteria sc);
    
    public  IAsyncEnumerable<MSPC_Register> MSPC_RegisterSimpleSearch_Tag(GeneratorFromDB.SearchCriteria sc,  string value);
    public  IAsyncEnumerable<MSPC_Register> MSPC_RegisterSimpleSearchNull_Tag(GeneratorFromDB.SearchCriteria sc);
    
    public  IAsyncEnumerable<MSPC_Register> MSPC_RegisterSimpleSearch_Authority(GeneratorFromDB.SearchCriteria sc,  string value);
    public  IAsyncEnumerable<MSPC_Register> MSPC_RegisterSimpleSearchNull_Authority(GeneratorFromDB.SearchCriteria sc);
    
    public  IAsyncEnumerable<MSPC_Register> MSPC_RegisterSimpleSearch_PCName(GeneratorFromDB.SearchCriteria sc,  string value);
    public  IAsyncEnumerable<MSPC_Register> MSPC_RegisterSimpleSearchNull_PCName(GeneratorFromDB.SearchCriteria sc);
    
    public  IAsyncEnumerable<MSPC_Register> MSPC_RegisterSimpleSearch_stringRegisteredDate(GeneratorFromDB.SearchCriteria sc,  string value);
    public  IAsyncEnumerable<MSPC_Register> MSPC_RegisterSimpleSearchNull_stringRegisteredDate(GeneratorFromDB.SearchCriteria sc);
    
    public  IAsyncEnumerable<MSPC_Register> MSPC_RegisterSimpleSearch_EnvData(GeneratorFromDB.SearchCriteria sc,  string value);
    public  IAsyncEnumerable<MSPC_Register> MSPC_RegisterSimpleSearchNull_EnvData(GeneratorFromDB.SearchCriteria sc);
        } //interface searchdata   

   public class SearchDataMSPC_Register: ISearchDataMSPC_Register{
        private ApplicationDBContext context;
        public SearchDataMSPC_Register (ApplicationDBContext context) {
            this.context=context;
        }
           
        public async Task<long> GetAllCount(){
            return await context.MSPC_RegisterCount(null);
        }
        public async Task<long> GetAllCount(SearchMSPC_Register? search){
            return await context.MSPC_RegisterCount(search);
        }
        public IAsyncEnumerable<MSPC_Register> MSPC_RegisterFind_AsyncEnumerable(SearchMSPC_Register? search){
            return context.MSPC_RegisterFind_AsyncEnumerable(search);
        }
        public  IAsyncEnumerable<MSPC_Register> MSPC_RegisterSimpleSearch(GeneratorFromDB.SearchCriteria sc, eMSPC_RegisterColumns colToSearch, string? value){
        var search =SearchMSPC_Register.FromSearch(sc,colToSearch,value);
    /*
            var search = new SearchMSPC_Register();
            var orderBy = new GeneratorFromDB.OrderBy<eMSPC_RegisterColumns>();
                              orderBy.FieldName = colToSearch;
          
            orderBy.Asc = false;
            search.OrderBys = new[] { orderBy };
            search.PageNumber = 1;
            search.PageSize = int.MaxValue;
            var s = new GeneratorFromDB.SearchField<eMSPC_RegisterColumns>();
            s.Criteria = sc;
            s.FieldName = colToSearch;
            s.Value = value;
            search.SearchFields = new[] { s };
       */
            var data = this.MSPC_RegisterFind_AsyncEnumerable(search);
            return data;
        }

    
        //True
    public  IAsyncEnumerable<MSPC_Register> MSPC_RegisterSimpleSearch_Name(GeneratorFromDB.SearchCriteria sc,  string value){
         return MSPC_RegisterSimpleSearch(sc,eMSPC_RegisterColumns.Name,value?.ToString());

    
    }
    public  IAsyncEnumerable<MSPC_Register> MSPC_RegisterSimpleSearchNull_Name(GeneratorFromDB.SearchCriteria sc){
        return MSPC_RegisterSimpleSearch(sc,eMSPC_RegisterColumns.Name,null);

    }


        //True
    public  IAsyncEnumerable<MSPC_Register> MSPC_RegisterSimpleSearch_Hostname(GeneratorFromDB.SearchCriteria sc,  string value){
         return MSPC_RegisterSimpleSearch(sc,eMSPC_RegisterColumns.Hostname,value?.ToString());

    
    }
    public  IAsyncEnumerable<MSPC_Register> MSPC_RegisterSimpleSearchNull_Hostname(GeneratorFromDB.SearchCriteria sc){
        return MSPC_RegisterSimpleSearch(sc,eMSPC_RegisterColumns.Hostname,null);

    }


        //True
    public  IAsyncEnumerable<MSPC_Register> MSPC_RegisterSimpleSearch_Port(GeneratorFromDB.SearchCriteria sc,  int? value){
         return MSPC_RegisterSimpleSearch(sc,eMSPC_RegisterColumns.Port,value?.ToString());

    
    }
    public  IAsyncEnumerable<MSPC_Register> MSPC_RegisterSimpleSearchNull_Port(GeneratorFromDB.SearchCriteria sc){
        return MSPC_RegisterSimpleSearch(sc,eMSPC_RegisterColumns.Port,null);

    }


        //True
    public  IAsyncEnumerable<MSPC_Register> MSPC_RegisterSimpleSearch_Tag(GeneratorFromDB.SearchCriteria sc,  string value){
         return MSPC_RegisterSimpleSearch(sc,eMSPC_RegisterColumns.Tag,value?.ToString());

    
    }
    public  IAsyncEnumerable<MSPC_Register> MSPC_RegisterSimpleSearchNull_Tag(GeneratorFromDB.SearchCriteria sc){
        return MSPC_RegisterSimpleSearch(sc,eMSPC_RegisterColumns.Tag,null);

    }


        //True
    public  IAsyncEnumerable<MSPC_Register> MSPC_RegisterSimpleSearch_Authority(GeneratorFromDB.SearchCriteria sc,  string value){
         return MSPC_RegisterSimpleSearch(sc,eMSPC_RegisterColumns.Authority,value?.ToString());

    
    }
    public  IAsyncEnumerable<MSPC_Register> MSPC_RegisterSimpleSearchNull_Authority(GeneratorFromDB.SearchCriteria sc){
        return MSPC_RegisterSimpleSearch(sc,eMSPC_RegisterColumns.Authority,null);

    }


        //True
    public  IAsyncEnumerable<MSPC_Register> MSPC_RegisterSimpleSearch_PCName(GeneratorFromDB.SearchCriteria sc,  string value){
         return MSPC_RegisterSimpleSearch(sc,eMSPC_RegisterColumns.PCName,value?.ToString());

    
    }
    public  IAsyncEnumerable<MSPC_Register> MSPC_RegisterSimpleSearchNull_PCName(GeneratorFromDB.SearchCriteria sc){
        return MSPC_RegisterSimpleSearch(sc,eMSPC_RegisterColumns.PCName,null);

    }


        //True
    public  IAsyncEnumerable<MSPC_Register> MSPC_RegisterSimpleSearch_stringRegisteredDate(GeneratorFromDB.SearchCriteria sc,  string value){
         return MSPC_RegisterSimpleSearch(sc,eMSPC_RegisterColumns.stringRegisteredDate,value?.ToString());

    
    }
    public  IAsyncEnumerable<MSPC_Register> MSPC_RegisterSimpleSearchNull_stringRegisteredDate(GeneratorFromDB.SearchCriteria sc){
        return MSPC_RegisterSimpleSearch(sc,eMSPC_RegisterColumns.stringRegisteredDate,null);

    }


        //True
    public  IAsyncEnumerable<MSPC_Register> MSPC_RegisterSimpleSearch_EnvData(GeneratorFromDB.SearchCriteria sc,  string value){
         return MSPC_RegisterSimpleSearch(sc,eMSPC_RegisterColumns.EnvData,value?.ToString());

    
    }
    public  IAsyncEnumerable<MSPC_Register> MSPC_RegisterSimpleSearchNull_EnvData(GeneratorFromDB.SearchCriteria sc){
        return MSPC_RegisterSimpleSearch(sc,eMSPC_RegisterColumns.EnvData,null);

    }


        } //class searchdata




    
   


//end added new




