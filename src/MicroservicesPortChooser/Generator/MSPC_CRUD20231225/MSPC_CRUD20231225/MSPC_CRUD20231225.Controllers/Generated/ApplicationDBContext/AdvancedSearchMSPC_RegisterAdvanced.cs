//5.this was autogenerated by a tool. Do not modify! Use partial
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
namespace Generated;
[ApiController]
[Route("api/[controller]/[action]")]    
public partial class AdvancedSearch_ApplicationDBContext_MSPC_RegisterController : Controller
{
    private ISearchDataMSPC_Register _search;
    public AdvancedSearch_ApplicationDBContext_MSPC_RegisterController(ISearchDataMSPC_Register search)
	{
        _search=search;
	}
    [HttpGet]
    public async Task<long> GetAllCount()
    {
       return await _search.GetAllCount();
        
    }
    
    [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> GetAll()
    {
        await foreach(var item in _search.MSPC_RegisterFind_AsyncEnumerable(null))
        {
            yield return (MSPC_Register_Table)item!;
        }
        
    }
    [HttpGet]   
    public async IAsyncEnumerable<MSPC_Register_Table> GetSearchSimple(string ColumnName, string Operator, string Value){
           var search = new SearchMSPC_Register();
           search.PageSize = int.MaxValue - 1;
        search.SearchFields = new SearchField<eMSPC_RegisterColumns>[1];
        search.SearchFields[0]= new SearchField<eMSPC_RegisterColumns>();
        if(Enum.TryParse< eMSPC_RegisterColumns >(ColumnName,true ,out var valField)){
            search.SearchFields[0].FieldName = valField;
        }
        else
        {
            search.SearchFields[0].FieldName = (eMSPC_RegisterColumns )int.Parse(ColumnName);;
        }
        search.SearchFields[0].Value= Value;
        var criteria= SearchCriteria.None;
        if(Enum.TryParse<SearchCriteria>(Operator,true,out var value))
        {
            criteria = value;
        }
        else
        {
            criteria = (SearchCriteria)int.Parse(Operator);
        }
        
        search.SearchFields[0].Criteria= criteria;
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(search))
        {
            yield return (MSPC_Register_Table)item!;
        }

    }
    [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> GetWithSearch(SearchMSPC_Register s)
    {
        await foreach(var item in _search.MSPC_RegisterFind_AsyncEnumerable(s))
        {
            yield return (MSPC_Register_Table)item!;
        }
        
    }
    [HttpGet]
    public async Task<long> GetWithSearchCount(SearchMSPC_Register? s)
    {
        if (s == null)
            return await GetAllCount();

        return await _search.GetAllCount(s);
    }
        
    [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Name_EqualValue( string  value)
    {
        var sc = GeneratorFromDB.SearchCriteria.Equal;
        await foreach (var item in _search.MSPC_RegisterSimpleSearch_Name(sc, value))
        {
            yield return (MSPC_Register_Table)item!;
        }
    }
    [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Name_DifferentValue( string  value)
    {
        var sc = GeneratorFromDB.SearchCriteria.Different;
        await foreach (var item in _search.MSPC_RegisterSimpleSearch_Name(sc, value))
        {
            yield return (MSPC_Register_Table)item!;
        }
    }
    [HttpGet]
    public  async IAsyncEnumerable<MSPC_Register_Table> Name_SimpleSearch(GeneratorFromDB.SearchCriteria sc,  string value){
        await foreach(var item in _search.MSPC_RegisterSimpleSearch_Name(sc,value))
        {
            yield return (MSPC_Register_Table)item!;
        }
    }

        [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Name_FindNull(){
        var sc = GeneratorFromDB.SearchCriteria.Equal;
        await foreach(var item in _search.MSPC_RegisterSimpleSearchNull_Name(sc))
        {
            yield return (MSPC_Register_Table)item!;
        }
    }
    [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Name_FindNotNull(){
        var sc = GeneratorFromDB.SearchCriteria.Different;
        await foreach(var item in _search.MSPC_RegisterSimpleSearchNull_Name(sc))
        {
            yield return (MSPC_Register_Table)item!;
        }
    }
         
     [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Name_EqualValues( string[]  values)
    {
        string? value=null;
        if(values.Length>0)
            value=string.Join( ",",values);
        var sc=SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.InArray,eMSPC_RegisterColumns.Name,value);
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {
        
            yield return (MSPC_Register_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Name_DifferentValues( string[]  values)
    {
        string? value=null;
        if(values.Length>0)
            value=string.Join( ",",values);
        var sc=SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.NotInArray,eMSPC_RegisterColumns.Name,value);
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {
        
            yield return (MSPC_Register_Table)item!;
        }
    }
         [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Name_Contains(string  val)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.Contains, eMSPC_RegisterColumns.Name  , val);
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }

     [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Name_EndsWith(string  val)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.EndsWith, eMSPC_RegisterColumns.Name  , val);
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }

      [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Name_StartsWith(string  val)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.StartsWith, eMSPC_RegisterColumns.Name  , val);
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }


              [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Name_LessOrEqual(string  val)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.LessOrEqual, eMSPC_RegisterColumns.Name  , val.ToString());
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Name_Less(string  val)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.Less, eMSPC_RegisterColumns.Name  , val.ToString());
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }
     
      [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Name_GreaterOrEqual(string  val)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.GreaterOrEqual, eMSPC_RegisterColumns.Name  , val.ToString());
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Name_Greater(string  val)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.Greater, eMSPC_RegisterColumns.Name  , val.ToString());
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Name_Between( string  valStart, string valEnd)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.Between, eMSPC_RegisterColumns.Name, valStart +","+ valEnd);
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }    

    [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Name_NotBetween( string  valStart, string valEnd)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.NotBetween, eMSPC_RegisterColumns.Name, valStart +","+ valEnd);
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }    

        
    [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Hostname_EqualValue( string  value)
    {
        var sc = GeneratorFromDB.SearchCriteria.Equal;
        await foreach (var item in _search.MSPC_RegisterSimpleSearch_Hostname(sc, value))
        {
            yield return (MSPC_Register_Table)item!;
        }
    }
    [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Hostname_DifferentValue( string  value)
    {
        var sc = GeneratorFromDB.SearchCriteria.Different;
        await foreach (var item in _search.MSPC_RegisterSimpleSearch_Hostname(sc, value))
        {
            yield return (MSPC_Register_Table)item!;
        }
    }
    [HttpGet]
    public  async IAsyncEnumerable<MSPC_Register_Table> Hostname_SimpleSearch(GeneratorFromDB.SearchCriteria sc,  string value){
        await foreach(var item in _search.MSPC_RegisterSimpleSearch_Hostname(sc,value))
        {
            yield return (MSPC_Register_Table)item!;
        }
    }

        [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Hostname_FindNull(){
        var sc = GeneratorFromDB.SearchCriteria.Equal;
        await foreach(var item in _search.MSPC_RegisterSimpleSearchNull_Hostname(sc))
        {
            yield return (MSPC_Register_Table)item!;
        }
    }
    [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Hostname_FindNotNull(){
        var sc = GeneratorFromDB.SearchCriteria.Different;
        await foreach(var item in _search.MSPC_RegisterSimpleSearchNull_Hostname(sc))
        {
            yield return (MSPC_Register_Table)item!;
        }
    }
         
     [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Hostname_EqualValues( string[]  values)
    {
        string? value=null;
        if(values.Length>0)
            value=string.Join( ",",values);
        var sc=SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.InArray,eMSPC_RegisterColumns.Hostname,value);
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {
        
            yield return (MSPC_Register_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Hostname_DifferentValues( string[]  values)
    {
        string? value=null;
        if(values.Length>0)
            value=string.Join( ",",values);
        var sc=SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.NotInArray,eMSPC_RegisterColumns.Hostname,value);
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {
        
            yield return (MSPC_Register_Table)item!;
        }
    }
         [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Hostname_Contains(string  val)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.Contains, eMSPC_RegisterColumns.Hostname  , val);
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }

     [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Hostname_EndsWith(string  val)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.EndsWith, eMSPC_RegisterColumns.Hostname  , val);
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }

      [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Hostname_StartsWith(string  val)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.StartsWith, eMSPC_RegisterColumns.Hostname  , val);
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }


              [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Hostname_LessOrEqual(string  val)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.LessOrEqual, eMSPC_RegisterColumns.Hostname  , val.ToString());
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Hostname_Less(string  val)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.Less, eMSPC_RegisterColumns.Hostname  , val.ToString());
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }
     
      [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Hostname_GreaterOrEqual(string  val)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.GreaterOrEqual, eMSPC_RegisterColumns.Hostname  , val.ToString());
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Hostname_Greater(string  val)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.Greater, eMSPC_RegisterColumns.Hostname  , val.ToString());
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Hostname_Between( string  valStart, string valEnd)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.Between, eMSPC_RegisterColumns.Hostname, valStart +","+ valEnd);
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }    

    [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Hostname_NotBetween( string  valStart, string valEnd)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.NotBetween, eMSPC_RegisterColumns.Hostname, valStart +","+ valEnd);
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }    

        
    [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Port_EqualValue( int?  value)
    {
        var sc = GeneratorFromDB.SearchCriteria.Equal;
        await foreach (var item in _search.MSPC_RegisterSimpleSearch_Port(sc, value))
        {
            yield return (MSPC_Register_Table)item!;
        }
    }
    [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Port_DifferentValue( int?  value)
    {
        var sc = GeneratorFromDB.SearchCriteria.Different;
        await foreach (var item in _search.MSPC_RegisterSimpleSearch_Port(sc, value))
        {
            yield return (MSPC_Register_Table)item!;
        }
    }
    [HttpGet]
    public  async IAsyncEnumerable<MSPC_Register_Table> Port_SimpleSearch(GeneratorFromDB.SearchCriteria sc,  int? value){
        await foreach(var item in _search.MSPC_RegisterSimpleSearch_Port(sc,value))
        {
            yield return (MSPC_Register_Table)item!;
        }
    }

        [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Port_FindNull(){
        var sc = GeneratorFromDB.SearchCriteria.Equal;
        await foreach(var item in _search.MSPC_RegisterSimpleSearchNull_Port(sc))
        {
            yield return (MSPC_Register_Table)item!;
        }
    }
    [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Port_FindNotNull(){
        var sc = GeneratorFromDB.SearchCriteria.Different;
        await foreach(var item in _search.MSPC_RegisterSimpleSearchNull_Port(sc))
        {
            yield return (MSPC_Register_Table)item!;
        }
    }
         
     [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Port_EqualValues( int?[]  values)
    {
        string? value=null;
        if(values.Length>0)
            value=string.Join( ",",values);
        var sc=SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.InArray,eMSPC_RegisterColumns.Port,value);
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {
        
            yield return (MSPC_Register_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Port_DifferentValues( int?[]  values)
    {
        string? value=null;
        if(values.Length>0)
            value=string.Join( ",",values);
        var sc=SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.NotInArray,eMSPC_RegisterColumns.Port,value);
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {
        
            yield return (MSPC_Register_Table)item!;
        }
    }
              [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Port_LessOrEqual(int  val)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.LessOrEqual, eMSPC_RegisterColumns.Port  , val.ToString());
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Port_Less(int  val)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.Less, eMSPC_RegisterColumns.Port  , val.ToString());
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }
     
      [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Port_GreaterOrEqual(int  val)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.GreaterOrEqual, eMSPC_RegisterColumns.Port  , val.ToString());
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Port_Greater(int  val)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.Greater, eMSPC_RegisterColumns.Port  , val.ToString());
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Port_Between( int  valStart, int valEnd)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.Between, eMSPC_RegisterColumns.Port, valStart +","+ valEnd);
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }    

    [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Port_NotBetween( int  valStart, int valEnd)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.NotBetween, eMSPC_RegisterColumns.Port, valStart +","+ valEnd);
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }    

        
    [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Tag_EqualValue( string  value)
    {
        var sc = GeneratorFromDB.SearchCriteria.Equal;
        await foreach (var item in _search.MSPC_RegisterSimpleSearch_Tag(sc, value))
        {
            yield return (MSPC_Register_Table)item!;
        }
    }
    [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Tag_DifferentValue( string  value)
    {
        var sc = GeneratorFromDB.SearchCriteria.Different;
        await foreach (var item in _search.MSPC_RegisterSimpleSearch_Tag(sc, value))
        {
            yield return (MSPC_Register_Table)item!;
        }
    }
    [HttpGet]
    public  async IAsyncEnumerable<MSPC_Register_Table> Tag_SimpleSearch(GeneratorFromDB.SearchCriteria sc,  string value){
        await foreach(var item in _search.MSPC_RegisterSimpleSearch_Tag(sc,value))
        {
            yield return (MSPC_Register_Table)item!;
        }
    }

        [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Tag_FindNull(){
        var sc = GeneratorFromDB.SearchCriteria.Equal;
        await foreach(var item in _search.MSPC_RegisterSimpleSearchNull_Tag(sc))
        {
            yield return (MSPC_Register_Table)item!;
        }
    }
    [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Tag_FindNotNull(){
        var sc = GeneratorFromDB.SearchCriteria.Different;
        await foreach(var item in _search.MSPC_RegisterSimpleSearchNull_Tag(sc))
        {
            yield return (MSPC_Register_Table)item!;
        }
    }
         
     [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Tag_EqualValues( string[]  values)
    {
        string? value=null;
        if(values.Length>0)
            value=string.Join( ",",values);
        var sc=SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.InArray,eMSPC_RegisterColumns.Tag,value);
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {
        
            yield return (MSPC_Register_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Tag_DifferentValues( string[]  values)
    {
        string? value=null;
        if(values.Length>0)
            value=string.Join( ",",values);
        var sc=SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.NotInArray,eMSPC_RegisterColumns.Tag,value);
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {
        
            yield return (MSPC_Register_Table)item!;
        }
    }
         [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Tag_Contains(string  val)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.Contains, eMSPC_RegisterColumns.Tag  , val);
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }

     [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Tag_EndsWith(string  val)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.EndsWith, eMSPC_RegisterColumns.Tag  , val);
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }

      [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Tag_StartsWith(string  val)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.StartsWith, eMSPC_RegisterColumns.Tag  , val);
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }


              [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Tag_LessOrEqual(string  val)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.LessOrEqual, eMSPC_RegisterColumns.Tag  , val.ToString());
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Tag_Less(string  val)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.Less, eMSPC_RegisterColumns.Tag  , val.ToString());
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }
     
      [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Tag_GreaterOrEqual(string  val)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.GreaterOrEqual, eMSPC_RegisterColumns.Tag  , val.ToString());
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Tag_Greater(string  val)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.Greater, eMSPC_RegisterColumns.Tag  , val.ToString());
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Tag_Between( string  valStart, string valEnd)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.Between, eMSPC_RegisterColumns.Tag, valStart +","+ valEnd);
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }    

    [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Tag_NotBetween( string  valStart, string valEnd)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.NotBetween, eMSPC_RegisterColumns.Tag, valStart +","+ valEnd);
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }    

        
    [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Authority_EqualValue( string  value)
    {
        var sc = GeneratorFromDB.SearchCriteria.Equal;
        await foreach (var item in _search.MSPC_RegisterSimpleSearch_Authority(sc, value))
        {
            yield return (MSPC_Register_Table)item!;
        }
    }
    [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Authority_DifferentValue( string  value)
    {
        var sc = GeneratorFromDB.SearchCriteria.Different;
        await foreach (var item in _search.MSPC_RegisterSimpleSearch_Authority(sc, value))
        {
            yield return (MSPC_Register_Table)item!;
        }
    }
    [HttpGet]
    public  async IAsyncEnumerable<MSPC_Register_Table> Authority_SimpleSearch(GeneratorFromDB.SearchCriteria sc,  string value){
        await foreach(var item in _search.MSPC_RegisterSimpleSearch_Authority(sc,value))
        {
            yield return (MSPC_Register_Table)item!;
        }
    }

        [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Authority_FindNull(){
        var sc = GeneratorFromDB.SearchCriteria.Equal;
        await foreach(var item in _search.MSPC_RegisterSimpleSearchNull_Authority(sc))
        {
            yield return (MSPC_Register_Table)item!;
        }
    }
    [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Authority_FindNotNull(){
        var sc = GeneratorFromDB.SearchCriteria.Different;
        await foreach(var item in _search.MSPC_RegisterSimpleSearchNull_Authority(sc))
        {
            yield return (MSPC_Register_Table)item!;
        }
    }
         
     [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Authority_EqualValues( string[]  values)
    {
        string? value=null;
        if(values.Length>0)
            value=string.Join( ",",values);
        var sc=SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.InArray,eMSPC_RegisterColumns.Authority,value);
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {
        
            yield return (MSPC_Register_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Authority_DifferentValues( string[]  values)
    {
        string? value=null;
        if(values.Length>0)
            value=string.Join( ",",values);
        var sc=SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.NotInArray,eMSPC_RegisterColumns.Authority,value);
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {
        
            yield return (MSPC_Register_Table)item!;
        }
    }
         [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Authority_Contains(string  val)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.Contains, eMSPC_RegisterColumns.Authority  , val);
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }

     [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Authority_EndsWith(string  val)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.EndsWith, eMSPC_RegisterColumns.Authority  , val);
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }

      [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Authority_StartsWith(string  val)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.StartsWith, eMSPC_RegisterColumns.Authority  , val);
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }


              [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Authority_LessOrEqual(string  val)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.LessOrEqual, eMSPC_RegisterColumns.Authority  , val.ToString());
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Authority_Less(string  val)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.Less, eMSPC_RegisterColumns.Authority  , val.ToString());
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }
     
      [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Authority_GreaterOrEqual(string  val)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.GreaterOrEqual, eMSPC_RegisterColumns.Authority  , val.ToString());
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Authority_Greater(string  val)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.Greater, eMSPC_RegisterColumns.Authority  , val.ToString());
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Authority_Between( string  valStart, string valEnd)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.Between, eMSPC_RegisterColumns.Authority, valStart +","+ valEnd);
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }    

    [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> Authority_NotBetween( string  valStart, string valEnd)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.NotBetween, eMSPC_RegisterColumns.Authority, valStart +","+ valEnd);
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }    

        
    [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> PCName_EqualValue( string  value)
    {
        var sc = GeneratorFromDB.SearchCriteria.Equal;
        await foreach (var item in _search.MSPC_RegisterSimpleSearch_PCName(sc, value))
        {
            yield return (MSPC_Register_Table)item!;
        }
    }
    [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> PCName_DifferentValue( string  value)
    {
        var sc = GeneratorFromDB.SearchCriteria.Different;
        await foreach (var item in _search.MSPC_RegisterSimpleSearch_PCName(sc, value))
        {
            yield return (MSPC_Register_Table)item!;
        }
    }
    [HttpGet]
    public  async IAsyncEnumerable<MSPC_Register_Table> PCName_SimpleSearch(GeneratorFromDB.SearchCriteria sc,  string value){
        await foreach(var item in _search.MSPC_RegisterSimpleSearch_PCName(sc,value))
        {
            yield return (MSPC_Register_Table)item!;
        }
    }

        [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> PCName_FindNull(){
        var sc = GeneratorFromDB.SearchCriteria.Equal;
        await foreach(var item in _search.MSPC_RegisterSimpleSearchNull_PCName(sc))
        {
            yield return (MSPC_Register_Table)item!;
        }
    }
    [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> PCName_FindNotNull(){
        var sc = GeneratorFromDB.SearchCriteria.Different;
        await foreach(var item in _search.MSPC_RegisterSimpleSearchNull_PCName(sc))
        {
            yield return (MSPC_Register_Table)item!;
        }
    }
         
     [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> PCName_EqualValues( string[]  values)
    {
        string? value=null;
        if(values.Length>0)
            value=string.Join( ",",values);
        var sc=SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.InArray,eMSPC_RegisterColumns.PCName,value);
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {
        
            yield return (MSPC_Register_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> PCName_DifferentValues( string[]  values)
    {
        string? value=null;
        if(values.Length>0)
            value=string.Join( ",",values);
        var sc=SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.NotInArray,eMSPC_RegisterColumns.PCName,value);
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {
        
            yield return (MSPC_Register_Table)item!;
        }
    }
         [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> PCName_Contains(string  val)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.Contains, eMSPC_RegisterColumns.PCName  , val);
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }

     [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> PCName_EndsWith(string  val)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.EndsWith, eMSPC_RegisterColumns.PCName  , val);
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }

      [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> PCName_StartsWith(string  val)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.StartsWith, eMSPC_RegisterColumns.PCName  , val);
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }


              [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> PCName_LessOrEqual(string  val)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.LessOrEqual, eMSPC_RegisterColumns.PCName  , val.ToString());
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> PCName_Less(string  val)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.Less, eMSPC_RegisterColumns.PCName  , val.ToString());
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }
     
      [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> PCName_GreaterOrEqual(string  val)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.GreaterOrEqual, eMSPC_RegisterColumns.PCName  , val.ToString());
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> PCName_Greater(string  val)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.Greater, eMSPC_RegisterColumns.PCName  , val.ToString());
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> PCName_Between( string  valStart, string valEnd)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.Between, eMSPC_RegisterColumns.PCName, valStart +","+ valEnd);
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }    

    [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> PCName_NotBetween( string  valStart, string valEnd)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.NotBetween, eMSPC_RegisterColumns.PCName, valStart +","+ valEnd);
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }    

        
    [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> stringRegisteredDate_EqualValue( string  value)
    {
        var sc = GeneratorFromDB.SearchCriteria.Equal;
        await foreach (var item in _search.MSPC_RegisterSimpleSearch_stringRegisteredDate(sc, value))
        {
            yield return (MSPC_Register_Table)item!;
        }
    }
    [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> stringRegisteredDate_DifferentValue( string  value)
    {
        var sc = GeneratorFromDB.SearchCriteria.Different;
        await foreach (var item in _search.MSPC_RegisterSimpleSearch_stringRegisteredDate(sc, value))
        {
            yield return (MSPC_Register_Table)item!;
        }
    }
    [HttpGet]
    public  async IAsyncEnumerable<MSPC_Register_Table> stringRegisteredDate_SimpleSearch(GeneratorFromDB.SearchCriteria sc,  string value){
        await foreach(var item in _search.MSPC_RegisterSimpleSearch_stringRegisteredDate(sc,value))
        {
            yield return (MSPC_Register_Table)item!;
        }
    }

        [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> stringRegisteredDate_FindNull(){
        var sc = GeneratorFromDB.SearchCriteria.Equal;
        await foreach(var item in _search.MSPC_RegisterSimpleSearchNull_stringRegisteredDate(sc))
        {
            yield return (MSPC_Register_Table)item!;
        }
    }
    [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> stringRegisteredDate_FindNotNull(){
        var sc = GeneratorFromDB.SearchCriteria.Different;
        await foreach(var item in _search.MSPC_RegisterSimpleSearchNull_stringRegisteredDate(sc))
        {
            yield return (MSPC_Register_Table)item!;
        }
    }
         
     [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> stringRegisteredDate_EqualValues( string[]  values)
    {
        string? value=null;
        if(values.Length>0)
            value=string.Join( ",",values);
        var sc=SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.InArray,eMSPC_RegisterColumns.stringRegisteredDate,value);
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {
        
            yield return (MSPC_Register_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> stringRegisteredDate_DifferentValues( string[]  values)
    {
        string? value=null;
        if(values.Length>0)
            value=string.Join( ",",values);
        var sc=SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.NotInArray,eMSPC_RegisterColumns.stringRegisteredDate,value);
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {
        
            yield return (MSPC_Register_Table)item!;
        }
    }
         [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> stringRegisteredDate_Contains(string  val)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.Contains, eMSPC_RegisterColumns.stringRegisteredDate  , val);
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }

     [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> stringRegisteredDate_EndsWith(string  val)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.EndsWith, eMSPC_RegisterColumns.stringRegisteredDate  , val);
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }

      [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> stringRegisteredDate_StartsWith(string  val)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.StartsWith, eMSPC_RegisterColumns.stringRegisteredDate  , val);
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }


              [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> stringRegisteredDate_LessOrEqual(string  val)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.LessOrEqual, eMSPC_RegisterColumns.stringRegisteredDate  , val.ToString());
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> stringRegisteredDate_Less(string  val)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.Less, eMSPC_RegisterColumns.stringRegisteredDate  , val.ToString());
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }
     
      [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> stringRegisteredDate_GreaterOrEqual(string  val)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.GreaterOrEqual, eMSPC_RegisterColumns.stringRegisteredDate  , val.ToString());
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> stringRegisteredDate_Greater(string  val)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.Greater, eMSPC_RegisterColumns.stringRegisteredDate  , val.ToString());
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> stringRegisteredDate_Between( string  valStart, string valEnd)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.Between, eMSPC_RegisterColumns.stringRegisteredDate, valStart +","+ valEnd);
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }    

    [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> stringRegisteredDate_NotBetween( string  valStart, string valEnd)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.NotBetween, eMSPC_RegisterColumns.stringRegisteredDate, valStart +","+ valEnd);
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }    

        
    [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> EnvData_EqualValue( string  value)
    {
        var sc = GeneratorFromDB.SearchCriteria.Equal;
        await foreach (var item in _search.MSPC_RegisterSimpleSearch_EnvData(sc, value))
        {
            yield return (MSPC_Register_Table)item!;
        }
    }
    [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> EnvData_DifferentValue( string  value)
    {
        var sc = GeneratorFromDB.SearchCriteria.Different;
        await foreach (var item in _search.MSPC_RegisterSimpleSearch_EnvData(sc, value))
        {
            yield return (MSPC_Register_Table)item!;
        }
    }
    [HttpGet]
    public  async IAsyncEnumerable<MSPC_Register_Table> EnvData_SimpleSearch(GeneratorFromDB.SearchCriteria sc,  string value){
        await foreach(var item in _search.MSPC_RegisterSimpleSearch_EnvData(sc,value))
        {
            yield return (MSPC_Register_Table)item!;
        }
    }

        [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> EnvData_FindNull(){
        var sc = GeneratorFromDB.SearchCriteria.Equal;
        await foreach(var item in _search.MSPC_RegisterSimpleSearchNull_EnvData(sc))
        {
            yield return (MSPC_Register_Table)item!;
        }
    }
    [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> EnvData_FindNotNull(){
        var sc = GeneratorFromDB.SearchCriteria.Different;
        await foreach(var item in _search.MSPC_RegisterSimpleSearchNull_EnvData(sc))
        {
            yield return (MSPC_Register_Table)item!;
        }
    }
         
     [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> EnvData_EqualValues( string[]  values)
    {
        string? value=null;
        if(values.Length>0)
            value=string.Join( ",",values);
        var sc=SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.InArray,eMSPC_RegisterColumns.EnvData,value);
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {
        
            yield return (MSPC_Register_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> EnvData_DifferentValues( string[]  values)
    {
        string? value=null;
        if(values.Length>0)
            value=string.Join( ",",values);
        var sc=SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.NotInArray,eMSPC_RegisterColumns.EnvData,value);
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {
        
            yield return (MSPC_Register_Table)item!;
        }
    }
         [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> EnvData_Contains(string  val)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.Contains, eMSPC_RegisterColumns.EnvData  , val);
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }

     [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> EnvData_EndsWith(string  val)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.EndsWith, eMSPC_RegisterColumns.EnvData  , val);
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }

      [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> EnvData_StartsWith(string  val)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.StartsWith, eMSPC_RegisterColumns.EnvData  , val);
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }


              [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> EnvData_LessOrEqual(string  val)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.LessOrEqual, eMSPC_RegisterColumns.EnvData  , val.ToString());
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> EnvData_Less(string  val)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.Less, eMSPC_RegisterColumns.EnvData  , val.ToString());
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }
     
      [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> EnvData_GreaterOrEqual(string  val)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.GreaterOrEqual, eMSPC_RegisterColumns.EnvData  , val.ToString());
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> EnvData_Greater(string  val)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.Greater, eMSPC_RegisterColumns.EnvData  , val.ToString());
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> EnvData_Between( string  valStart, string valEnd)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.Between, eMSPC_RegisterColumns.EnvData, valStart +","+ valEnd);
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }    

    [HttpGet]
    public async IAsyncEnumerable<MSPC_Register_Table> EnvData_NotBetween( string  valStart, string valEnd)
    {
        var sc = SearchMSPC_Register.FromSearch(GeneratorFromDB.SearchCriteria.NotBetween, eMSPC_RegisterColumns.EnvData, valStart +","+ valEnd);
        await foreach (var item in _search.MSPC_RegisterFind_AsyncEnumerable(sc))
        {

            yield return (MSPC_Register_Table)item!;
        }
    }    

            


    


}//end class

