//7.this was autogenerated by a tool. Do not modify! Use partial
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using GeneratorFromDB;
using Microsoft.EntityFrameworkCore;

//modified 2023.12.15
namespace Generated;

//ADDED by code generator
public interface I_MSPC_Register_Table 
{
        string? Name { get; set; }
                string? Hostname { get; set; }
                int? Port { get; set; }
                string? Tag { get; set; }
                string? Authority { get; set; }
                string? PCName { get; set; }
                string? stringRegisteredDate { get; set; }
                string? EnvData { get; set; }
            public string ToFullPropertyString();
		
}

public class MSPC_Register_Table : I_MSPC_Register_Table
{
    public string ToFullPropertyString(){
        string data="";
                data += "Authority=" +this.Authority;
            data += "EnvData=" +this.EnvData;
            data += "Hostname=" +this.Hostname;
            data += "Name=" +this.Name;
            data += "PCName=" +this.PCName;
            data += "Port=" +this.Port;
            data += "Tag=" +this.Tag;
            data += "stringRegisteredDate=" +this.stringRegisteredDate;
            return data;
    }

    public static MetaTable metaData = new("MSPC_Register");
    static MSPC_Register_Table (){
        MetaColumn mc=null;
        mc=new ("Name","string",true);                
        mc.IsPk = false ;
        mc.TypeJS = "string|null";
        metaData.AddColumn(mc);
        mc=new ("Hostname","string",true);                
        mc.IsPk = false ;
        mc.TypeJS = "string|null";
        metaData.AddColumn(mc);
        mc=new ("Port","int?",true);                
        mc.IsPk = false ;
        mc.TypeJS = "number";
        metaData.AddColumn(mc);
        mc=new ("Tag","string",true);                
        mc.IsPk = false ;
        mc.TypeJS = "string|null";
        metaData.AddColumn(mc);
        mc=new ("Authority","string",true);                
        mc.IsPk = false ;
        mc.TypeJS = "string|null";
        metaData.AddColumn(mc);
        mc=new ("PCName","string",true);                
        mc.IsPk = false ;
        mc.TypeJS = "string|null";
        metaData.AddColumn(mc);
        mc=new ("stringRegisteredDate","string",true);                
        mc.IsPk = false ;
        mc.TypeJS = "string|null";
        metaData.AddColumn(mc);
        mc=new ("EnvData","string",true);                
        mc.IsPk = false ;
        mc.TypeJS = "string|null";
        metaData.AddColumn(mc);
 //done with foreach property in static constructor
    }
        public string? Name { get; set; }
                public string? Hostname { get; set; }
                public int? Port { get; set; }
                public string? Tag { get; set; }
                public string? Authority { get; set; }
                public string? PCName { get; set; }
                public string? stringRegisteredDate { get; set; }
                public string? EnvData { get; set; }
             public void CopyFrom(I_MSPC_Register_Table other)  {
        this.Name = other.Name;
                this.Hostname = other.Hostname;
                this.Port = other.Port;
                this.Tag = other.Tag;
                this.Authority = other.Authority;
                this.PCName = other.PCName;
                this.stringRegisteredDate = other.stringRegisteredDate;
                this.EnvData = other.EnvData;
            }

    public static explicit operator MSPC_Register_Table?(MSPC_Register obj) { 
        if(obj == null)
            return null;
            //System.Diagnostics.Debugger.Break();
         var ret= new MSPC_Register_Table();
         ret.CopyFrom(obj as I_MSPC_Register_Table );
         return ret;
     }
     public static explicit operator MSPC_Register?(MSPC_Register_Table obj) { 
        if(obj == null)
            return null;
            //System.Diagnostics.Debugger.Break();
         var ret= new MSPC_Register();
         ret.CopyFrom(obj as I_MSPC_Register_Table) ;
         return ret;
     }



}
public partial class MSPC_Register : I_MSPC_Register_Table
{

    public string ToFullPropertyString(){
        string data="";
                data += "Authority=" +this.Authority;
            data += "EnvData=" +this.EnvData;
            data += "Hostname=" +this.Hostname;
            data += "Name=" +this.Name;
            data += "PCName=" +this.PCName;
            data += "Port=" +this.Port;
            data += "Tag=" +this.Tag;
            data += "stringRegisteredDate=" +this.stringRegisteredDate;
            return data;
    }

     public void CopyFrom(I_MSPC_Register_Table other)  {
        this.Name = other.Name;
                this.Hostname = other.Hostname;
                this.Port = other.Port;
                this.Tag = other.Tag;
                this.Authority = other.Authority;
                this.PCName = other.PCName;
                this.stringRegisteredDate = other.stringRegisteredDate;
                this.EnvData = other.EnvData;
            }

}

//for MSPC_Register 
public enum eMSPC_RegisterColumns {
    None = 0
        ,Name 
                ,Hostname 
                ,Port 
                ,Tag 
                ,Authority 
                ,PCName 
                ,stringRegisteredDate 
                ,EnvData 
        }

//finish ADDED by code generator

[Keyless]

public partial class MSPC_Register
{
    [StringLength(150)]
    public string? Name { get; set; }

    [StringLength(150)]
    public string? Hostname { get; set; }

    public int? Port { get; set; }

    [StringLength(150)]
    public string? Tag { get; set; }

    [StringLength(50)]
    public string? Authority { get; set; }

    [StringLength(150)]
    public string? PCName { get; set; }

    [Column(TypeName = "text")]
    public string? stringRegisteredDate { get; set; }

    [Column(TypeName = "text")]
    public string? EnvData { get; set; }
}


